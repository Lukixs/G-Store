INSERT INTO PRZEDMIOTY(PRZE_ID,PRZE_NAZWA,PRZE_OPIS,PRZE_CENA,PRZE_IMAGE,KATE_ID)
VALUES ('','Assasin Creed II','Assassin Creed II przedstawia Ezio, nowego Asasyna, który podejmuje zabójcze dzie³o swoich przodków. W tej zabójczej i porywaj¹cej kontynuacji poznasz epick¹ opowieœæ o w³adzy i korupcji, szkol¹c siê jednoczeœnie w rzemioœle Asasynów i korzystaj¹c z broni oraz wynalazków zaprojektowanych przez legendarnego Leonardo Da Vinci.','35','assassinscreed2.jpg',1);

INSERT INTO PRZEDMIOTY(PRZE_ID,PRZE_NAZWA,PRZE_OPIS,PRZE_CENA,PRZE_IMAGE,KATE_ID)
VALUES ('','Minecraft','komputerowa gra survivalowa o otwartym œwiecie stworzona przez Markusa Perssona i rozwijana przez Mojang Studios[a]. Minecraft pozwala graczom na budowanie i niszczenie obiektów po³o¿onych w losowo generowanym œwiecie gry. Gracz mo¿e atakowaæ napotkane istoty, zbieraæ surowce czy wytwarzaæ przedmioty.','60','minecraft.jpg',2);

INSERT INTO PRZEDMIOTY 
(PRZE_ID, PRZE_NAZWA, PRZE_OPIS, PRZE_CENA, PRZE_IMAGE, KATE_ID, PRZE_CRITIC_RATE)
VALUES ( null, 'Grand Thef Auto V', 'Komputerowa gra akcji nalezaca do serii Grand Theft Auto', 55, 'gta_V.jpg', 1, 9);

INSERT INTO PRZEDMIOTY 
(PRZE_ID, PRZE_NAZWA, PRZE_OPIS, PRZE_CENA, PRZE_IMAGE, KATE_ID, PRZE_CRITIC_RATE)
VALUES ( null, 'Counter Strike Global Offensive', 'Gra komputerowa typu shooter, polegajaca na glownie na refleksie, zrecznosci oraz zmyslach taktycznych gracza.', 55, 'CSGO.fifi', 3, 10);



INSERT INTO TRANSAKCJE (tra_id, tra_price, tra_datetime, prze_id, usr_id)
VALUES ('',25,sysdate,22,14);


CREATE TABLE transakcje
( tra_id number GENERATED BY DEFAULT ON NULL AS IDENTITY,
  tra_price number,
  tra_datetime DATE DEFAULT (sysdate),
  prze_id number,
  usr_id number,
  CONSTRAINT transakcje_pk PRIMARY KEY (tra_id),
  CONSTRAINT fk_usr_id FOREIGN KEY (usr_id)
  references uzytkownicy(usr_id),
  CONSTRAINT fk_prze_id FOREIGN KEY (prze_id)
  references przedmioty(prze_id)
);

CREATE OR REPLACE PROCEDURE 
 makeTransaction (price IN number, prze_id IN NUMBER, user_id IN NUMBER, tra_date OUT DATE) 
 AS
 tra_id TRANSAKCJE.TRA_ID%TYPE;
 BEGIN
 tra_date := sysdate;
 INSERT INTO TRANSAKCJE (tra_id, tra_price, tra_datetime, prze_id, usr_id)
 VALUES ('',price ,tra_date,prze_id,user_id) RETURNING TRA_ID INTO tra_id;
 
 INSERT INTO BIBLIOTEKI (bib_id, bib_date, usr_id, prze_id, tra_id)
 VALUES ('', tra_date, user_id, prze_id, tra_id);
 
 END;
 /

INSERT INTO TRANSAKCJE (tra_id, tra_price, tra_datetime, prze_id, usr_id)
VALUES ('',25,sysdate,22,14);





===============================================================================









CREATE OR REPLACE PROCEDURE 
 makeTransaction (price IN number, prze_id IN NUMBER, user_id IN NUMBER, tra_date OUT DATE) 
 AS
 tra_id TRANSAKCJE.TRA_ID%TYPE;
 l_exst number;
 ex_custom EXCEPTION;
 BEGIN

select count(*)
        into l_exst
        from BIBLIOTEKI
        where BIBLIOTEKI.PRZE_ID = prze_id
        AND BIBLIOTEKI.USR_ID = user_id;
 
if l_exst = 0
then

 tra_date := sysdate;
 INSERT INTO TRANSAKCJE (tra_id, tra_price, tra_datetime, prze_id, usr_id)
 VALUES ('',price ,tra_date,prze_id,user_id) RETURNING TRA_ID INTO tra_id;
 
 INSERT INTO BIBLIOTEKI (bib_id, bib_date, usr_id, prze_id, tra_id)
 VALUES ('', tra_date, user_id, prze_id, tra_id);
 
else
    RAISE ex_custom;
end if;
 
EXCEPTION
    WHEN ex_custom THEN
        RAISE_APPLICATION_ERROR(-20001,'Ta gra jest juz w posiadaniu tego uzytkownika');
 END;
 /
 

declare
    l_exst number;
    ex_custom EXCEPTION;
begin
    select count(*)
        into l_exst
        from BIBLIOTEKI
        where PRZE_ID = 2
        AND USR_ID = 14;

 
  if l_exst = 0
  then
     dbms_output.put_line('Do not exist');
  else
    RAISE ex_custom;
  end if;
  
  exception
      when ex_custom
      then
      RAISE_APPLICATION_ERROR(-20001,'My exception was raised');
 end;
 /
 
 
 =====================================================================================
 NICE
 =====================================================================================
 CREATE OR REPLACE PROCEDURE 
 makeTransaction (price IN number, przedmiot_id IN NUMBER, user_id IN NUMBER, tra_date OUT DATE) 
 AS
 tra_id TRANSAKCJE.TRA_ID%TYPE;
 l_exst number;
 ex_custom EXCEPTION;
 BEGIN

select count(*)
        into l_exst
        from BIBLIOTEKI
        where BIBLIOTEKI.PRZE_ID = przedmiot_id
        AND BIBLIOTEKI.USR_ID = user_id;
 
if l_exst = 0
then

 tra_date := sysdate;
 INSERT INTO TRANSAKCJE (tra_id, tra_price, tra_datetime, prze_id, usr_id)
 VALUES ('',price ,tra_date,przedmiot_id,user_id) RETURNING TRA_ID INTO tra_id;
 
 INSERT INTO BIBLIOTEKI (bib_id, bib_date, usr_id, prze_id, tra_id)
 VALUES ('', tra_date, user_id, przedmiot_id, tra_id);
 
else
    RAISE ex_custom;
end if;
 
EXCEPTION
    WHEN ex_custom THEN
        RAISE_APPLICATION_ERROR(-20001,'Ta gra jest juz w posiadaniu tego uzytkownika');
 END;
 /
 

declare
    l_exst number;
    ex_custom EXCEPTION;
begin
    select count(*)
        into l_exst
        from BIBLIOTEKI
        where PRZE_ID = 1
        AND USR_ID = 14;

 
  if l_exst = 0
  then
     dbms_output.put_line('Do not exist');
  else
    RAISE ex_custom;
  end if;
  
  exception
      when ex_custom
      then
      RAISE_APPLICATION_ERROR(-20001,'My exception was raised');
 end;
 /
 
 
 
 
 ================================================================
 Ten Komentarze
 ================================================================
 
 CREATE TABLE oceny
( oce_id number GENERATED BY DEFAULT ON NULL AS IDENTITY,
  oce_rate number,
  oce_message varchar2(250) NOT NULL,
  oce_date DATE DEFAULT(sysdate),
  usr_id number,
  prze_id number,
  CONSTRAINT oceny_pk PRIMARY KEY (oce_id),
  CONSTRAINT fk_oceny_usr_id FOREIGN KEY (usr_id)
  references uzytkownicy(usr_id),
  CONSTRAINT fk_oceny_prze_id FOREIGN KEY (prze_id)
  references przedmioty(prze_id)
);
alter session set nls_date_format = 'YYYY/MM/DD';

ALTER TABLE OCENY
MODIFY oce_date DEFAULT SYSDATE NOT NULL;

INSERT INTO OCENY (oce_id, oce_rate, oce_message, usr_id, prze_id) 
VALUES ('',8,'Nawet nawet giera', 14, 21);

SELECT OCENY.OCE_ID, UZYTKOWNICY.USR_NAME, OCENY.OCE_RATE, OCENY.OCE_MESSAGE, OCENY.USR_ID, OCENY.PRZE_ID, OCENY.OCE_DATE 
FROM OCENY
INNER JOIN UZYTKOWNICY
ON OCENY.USR_ID = UZYTKOWNICY.USR_ID
AND OCENY.PRZE_ID = 21;


=======================================================================
=======================================================================
CREATE TABLE kategorie
( kate_id number,
  kate_nazwa varchar2(50) NOT NULL,
  CONSTRAINT kate_pk PRIMARY KEY (kate_id)
);

CREATE SEQUENCE kate_seq START WITH 1;

CREATE OR REPLACE TRIGGER kate_trig_index
BEFORE INSERT ON KATEGORIE
FOR EACH ROW

BEGIN
  SELECT KATE_SEQ.NEXTVAL
  INTO   :new.KATE_ID
  FROM   dual;
END;
/

INSERT INTO KATEGORIE (KATE_NAZWA)
VALUES ('Strzelaniny');


ALTER TABLE PRZEDMIOTY
ADD CONSTRAINT fk_przedmioty_kategorie
    FOREIGN KEY (KATE_ID)
    REFERENCES KATEGORIE(KATE_ID);
 
 
