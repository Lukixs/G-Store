create sequence UZYTKOWNICY_SEQ
/

create sequence PRZEDMIOTY_SEQ
/

create sequence KATE_SEQ
/

create table UZYTKOWNICY
(
    USR_ID         NUMBER       not null
        constraint UZYTKOWNICY_PK
            primary key,
    USR_NAME       VARCHAR2(50),
    USR_EMAIL      VARCHAR2(50)
        unique,
    USR_BIRT       DATE,
    USR_TEL        NUMBER,
    USR_PASSWORD   VARCHAR2(50) not null,
    USR_PERMISSION NUMBER default (1)
)
/

create trigger UZYT_BIR
    before insert
    on UZYTKOWNICY
    for each row
BEGIN
    SELECT uzytkownicy_seq.NEXTVAL
    INTO :new.USR_ID
    FROM dual;
END;
/

create table KATEGORIE
(
    KATE_ID    NUMBER       not null
        constraint KATE_PK
            primary key,
    KATE_NAZWA VARCHAR2(50) not null
)
/

create table PRZEDMIOTY
(
    PRZE_ID          NUMBER       not null
        constraint PRZEDMIOTY_PK
            primary key,
    PRZE_NAZWA       VARCHAR2(50) not null,
    PRZE_OPIS        VARCHAR2(500),
    PRZE_CENA        NUMBER       not null,
    PRZE_IMAGE       VARCHAR2(50),
    KATE_ID          NUMBER
        constraint FK_PRZEDMIOTY_KATEGORIE
            references KATEGORIE,
    PRZE_CRITIC_RATE NUMBER
)
/

create trigger PRZEDMIOTY_BIR
    before insert
    on PRZEDMIOTY
    for each row
BEGIN
    SELECT przedmioty_seq.NEXTVAL
    INTO :new.PRZE_ID
    FROM dual;
END;
/

create table TRANSAKCJE
(
    TRA_ID       NUMBER generated by default on null as identity
        constraint TRANSAKCJE_PK
            primary key,
    TRA_PRICE    NUMBER,
    TRA_DATETIME DATE default (sysdate),
    PRZE_ID      NUMBER
        constraint FK_PRZE_ID
            references PRZEDMIOTY,
    USR_ID       NUMBER
        constraint FK_USR_ID
            references UZYTKOWNICY
)
/

create table BIBLIOTEKI
(
    BIB_ID   NUMBER generated by default on null as identity
        constraint BIBLIOTEKI_PK
            primary key,
    BIB_DATE DATE,
    USR_ID   NUMBER
        constraint FK_BIBLIO_USER_ID
            references UZYTKOWNICY,
    PRZE_ID  NUMBER
        constraint FK_BIBLIO_PRZE_ID
            references PRZEDMIOTY,
    TRA_ID   NUMBER
        constraint FK_BIBLIO_TRA_ID
            references TRANSAKCJE
)
/

create table OCENY
(
    OCE_ID      NUMBER generated by default on null as identity
        constraint OCENY_PK
            primary key,
    OCE_RATE    NUMBER,
    OCE_MESSAGE VARCHAR2(250)        not null,
    USR_ID      NUMBER
        constraint FK_OCENY_USR_ID
            references UZYTKOWNICY,
    PRZE_ID     NUMBER
        constraint FK_OCENY_PRZE_ID
            references PRZEDMIOTY,
    OCE_DATE    DATE default SYSDATE not null
)
/

create trigger KATE_TRIG_INDEX
    before insert
    on KATEGORIE
    for each row
BEGIN
    SELECT KATE_SEQ.NEXTVAL
    INTO :new.KATE_ID
    FROM dual;
END;
/

create PROCEDURE
    sayHello(name IN VARCHAR2, gra_id IN NUMBER, greeting OUT VARCHAR2)
AS
BEGIN
    greeting := 'Hello ' || name;
    INSERT INTO TRANSAKCJE (tra_id, tra_price, tra_datetime, prze_id, usr_id)
    VALUES ('', 35, sysdate, gra_id, 14);
END;
/

create PROCEDURE
    makeTransaction(price IN number, przedmiot_id IN NUMBER, user_id IN NUMBER, tra_date OUT DATE)
AS
    tra_id TRANSAKCJE.TRA_ID%TYPE;
    l_exst number;
    ex_custom EXCEPTION;
BEGIN

    select count(*)
    into l_exst
    from BIBLIOTEKI
    where BIBLIOTEKI.PRZE_ID = przedmiot_id
      AND BIBLIOTEKI.USR_ID = user_id;

    if l_exst = 0
    then

        tra_date := sysdate;
        INSERT INTO TRANSAKCJE (tra_id, tra_price, tra_datetime, prze_id, usr_id)
        VALUES ('', price, tra_date, przedmiot_id, user_id)
        RETURNING TRA_ID INTO tra_id;

        INSERT INTO BIBLIOTEKI (bib_id, bib_date, usr_id, prze_id, tra_id)
        VALUES ('', tra_date, user_id, przedmiot_id, tra_id);

    else
        RAISE ex_custom;
    end if;

EXCEPTION
    WHEN ex_custom THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ta gra jest juz w posiadaniu tego uzytkownika');
END;
/

create PROCEDURE
    showLibrary(User_ID IN number)
AS

BEGIN
    SELECT PRZEDMIOTY.PRZE_ID,
           PRZEDMIOTY.PRZE_NAZWA,
           PRZEDMIOTY.PRZE_OPIS,
           PRZEDMIOTY.PRZE_CENA,
           PRZEDMIOTY.PRZE_IMAGE,
           PRZEDMIOTY.KATE_ID,
           PRZEDMIOTY.PRZE_CRITIC_RATE
    FROM BIBLIOTEKI
             INNER JOIN PRZEDMIOTY
                        ON BIBLIOTEKI.PRZE_ID = PRZEDMIOTY.PRZE_ID
                            AND BIBLIOTEKI.USR_ID = User_ID;

END;
/

create PROCEDURE
    changePermission(pracownik_id number, user_id number, permission_state number)
AS
    tra_id    TRANSAKCJE.TRA_ID%TYPE;
    pracownik UZYTKOWNICY.USR_PERMISSION%TYPE;
BEGIN
    SELECT UZYTKOWNICY.USR_PERMISSION
    INTO pracownik
    FROM UZYTKOWNICY
    WHERE UZYTKOWNICY.USR_ID = pracownik_id;

    dbms_output.put_line(pracownik);
    dbms_output.put_line('Niby jest');


END;
/

create FUNCTION przedmioty_details
    RETURN SYS_REFCURSOR
AS
    c1 SYS_REFCURSOR;
BEGIN

    open c1 for
        SELECT *
        FROM PRZEDMIOTY;

    RETURN c1;
END;
/

create procedure show_items(rekordy OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN rekordy FOR
        SELECT * FROM PRZEDMIOTY;
END;
/

create procedure show_biblioteka(uzytkownik_id IN number, rekordy OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN rekordy FOR
        SELECT PRZEDMIOTY.PRZE_ID,
               PRZEDMIOTY.PRZE_NAZWA,
               PRZEDMIOTY.PRZE_OPIS,
               PRZEDMIOTY.PRZE_CENA,
               PRZEDMIOTY.PRZE_IMAGE,
               PRZEDMIOTY.KATE_ID,
               PRZEDMIOTY.PRZE_CRITIC_RATE
        FROM BIBLIOTEKI
                 INNER JOIN PRZEDMIOTY
                            ON BIBLIOTEKI.PRZE_ID = PRZEDMIOTY.PRZE_ID
                                AND BIBLIOTEKI.USR_ID = uzytkownik_id;
END;
/

create procedure show_library(uzytkownik_id IN number, rekordy OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN rekordy FOR
        SELECT PRZEDMIOTY.PRZE_ID,
               PRZEDMIOTY.PRZE_NAZWA,
               PRZEDMIOTY.PRZE_OPIS,
               PRZEDMIOTY.PRZE_CENA,
               PRZEDMIOTY.PRZE_IMAGE,
               PRZEDMIOTY.KATE_ID,
               PRZEDMIOTY.PRZE_CRITIC_RATE
        FROM BIBLIOTEKI
                 INNER JOIN PRZEDMIOTY
                            ON BIBLIOTEKI.PRZE_ID = PRZEDMIOTY.PRZE_ID
                                AND BIBLIOTEKI.USR_ID = uzytkownik_id;
END;
/

create procedure login(login IN VARCHAR2, haslo IN VARCHAR2, rekordy OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN rekordy FOR
        SELECT *
        FROM uzytkownicy
        WHERE USR_EMAIL = login
          and USR_PASSWORD = haslo;
END;
/

create procedure registration(username IN VARCHAR2, pwd IN VARCHAR2, email IN VARCHAR2, phone IN NUMBER,
                              uzy_id OUT NUMBER)
AS

    uzytkownik_perm number := 1;
    aktu_date       date;
BEGIN
    aktu_date := sysdate;
    INSERT INTO UZYTKOWNICY(USR_ID, USR_NAME, USR_EMAIL, USR_PASSWORD, USR_BIRT, USR_TEL, USR_PERMISSION)
    VALUES ('', username, email, pwd, aktu_date, phone, 1)
    RETURNING USR_ID INTO uzy_id;
END;
/

create procedure showComments(Przedmiot_ID IN NUMBER, rekordy OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN rekordy FOR
        SELECT OCENY.OCE_ID,
               UZYTKOWNICY.USR_NAME,
               OCENY.OCE_RATE,
               OCENY.OCE_MESSAGE,
               OCENY.USR_ID,
               OCENY.PRZE_ID,
               OCENY.OCE_DATE
        FROM OCENY
                 INNER JOIN UZYTKOWNICY
                            ON OCENY.USR_ID = UZYTKOWNICY.USR_ID
                                AND OCENY.PRZE_ID = Przedmiot_ID;
END;
/

create procedure addComment(ocena_rate IN NUMBER, ocena_message IN VARCHAR2, uzytkownik_id NUMBER,
                            Przedmiot_ID IN NUMBER)
AS
    any_rows_found number;
    ex_custom EXCEPTION;
BEGIN
    select count(*)
    into any_rows_found
    from OCENY
    where usr_id = uzytkownik_id
      and prze_id = Przedmiot_ID;

    if any_rows_found = 1 then
        RAISE ex_custom;
    else
        INSERT INTO OCENY (oce_id, oce_rate, oce_message, usr_id, prze_id)
        VALUES ('', ocena_rate, ocena_message, uzytkownik_id, Przedmiot_ID);
    end if;
EXCEPTION
    WHEN ex_custom THEN
        RAISE_APPLICATION_ERROR(-20002, 'Dodales juz komentarz dla tej gry!');

END;
/

create procedure showUsers(rekordy OUT SYS_REFCURSOR)
AS

BEGIN
    OPEN rekordy FOR
        SELECT USR_ID, USR_NAME, USR_EMAIL, USR_BIRT, USR_TEL, USR_PERMISSION
        FROM UZYTKOWNICY;
END;
/

create procedure delete_Comment(ocena_id IN NUMBER)
AS
BEGIN

    DELETE
    FROM OCENY
    WHERE OCE_ID = ocena_id;

END;
/

create procedure show_Categories(rekordy OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN rekordy FOR
        SELECT * FROM KATEGORIE;
END;
/


